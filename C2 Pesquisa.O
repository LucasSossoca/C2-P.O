{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a89345f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import contextlib\n",
    "import random\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abdff6fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sorting import (\n",
    "    bubble_sort,\n",
    "    selection_sort,\n",
    "    insertion_sort,\n",
    "    merge_sort,\n",
    "    shell_sort,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21030b04",
   "metadata": {},
   "outputs": [],
   "source": [
    "def bubble_sort(array):\n",
    "\n",
    "    for final in range(len(array), 0, -1):\n",
    "        exchanging = False\n",
    "\n",
    "        for current in range(0, final - 1):\n",
    "            if array[current] > array[current + 1]:\n",
    "                array[current + 1], array[current] = array[current], array[current + 1]\n",
    "                exchanging = True\n",
    "\n",
    "        if not exchanging:\n",
    "            break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "94ee38d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def insertion_sort(array):\n",
    "    for p in range(0, len(array)):\n",
    "        current_element = array[p]\n",
    "\n",
    "        while p > 0 and array[p - 1] > current_element:\n",
    "            array[p] = array[p - 1]\n",
    "            p -= 1\n",
    "\n",
    "        array[p] = current_element"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3d3a772",
   "metadata": {},
   "outputs": [],
   "source": [
    "def merge_sort(array):\n",
    "    aux = array[:]\n",
    "    sort_half(array, aux, 0, len(array) - 1)\n",
    "\n",
    "\n",
    "def sort_half(array, aux, start, end):\n",
    "    if start >= end:\n",
    "        return\n",
    "\n",
    "    middle = (start + end) // 2\n",
    "\n",
    "    sort_half(array, aux, start, middle)\n",
    "    sort_half(array, aux, middle + 1, end)\n",
    "\n",
    "    merge(array, aux, start, end)\n",
    "\n",
    "\n",
    "def merge(array, aux, start, end):\n",
    "    left = start\n",
    "    left_end = (start + end) // 2\n",
    "\n",
    "    right = left_end + 1\n",
    "    right_end = end\n",
    "\n",
    "    for position in range(start, end + 1):\n",
    "        if left > left_end:\n",
    "            aux[position] = array[right]\n",
    "            right += 1\n",
    "\n",
    "       \n",
    "        elif right > right_end:\n",
    "            aux[position] = array[left]\n",
    "            left += 1\n",
    "\n",
    "      \n",
    "        elif array[left] < array[right]:\n",
    "            aux[position] = array[left]\n",
    "            left += 1\n",
    "\n",
    "        else:\n",
    "            aux[position] = array[right]\n",
    "            right += 1\n",
    "\n",
    "    for k in range(start, end + 1):\n",
    "        array[k] = aux[k]\n",
    "\n",
    "\n",
    "\n",
    "import random\n",
    "array = [random.randint(0, 100) for i in range(1000000)]\n",
    "copy = array[:]\n",
    "import time\n",
    "\n",
    "start = time.time()\n",
    "sort(array)\n",
    "end = time.time()\n",
    "print(end - start)\n",
    "\n",
    "assert array == sorted(copy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59149c2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def selection_sort(array):\n",
    "    for index in range(0, len(array)):\n",
    "        min_index = index\n",
    "\n",
    "        for right in range(index + 1, len(array)):\n",
    "            if array[right] < array[min_index]:\n",
    "                min_index = right\n",
    "\n",
    "        array[index], array[min_index] = array[min_index], array[index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72659854",
   "metadata": {},
   "outputs": [],
   "source": [
    " def shell_sort(array):\n",
    "    ini = time.time()\n",
    "    sublistcount = len(array) // 2\n",
    "    while sublistcount > 0:\n",
    "\n",
    "        for startposition in range(sublistcount):\n",
    "            gapInsertionSort(array, startposition, sublistcount)\n",
    "\n",
    "        print(\"After increments of size\", sublistcount,\n",
    "              \"The list is\", array)\n",
    "\n",
    "        sublistcount = sublistcount // 2\n",
    "    fim = time.time()\n",
    "    print(f'Shell sort: {str(fim - ini)} segundos')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4841c726",
   "metadata": {},
   "outputs": [],
   "source": [
    "def quicksort(array):\n",
    "    if len(array) == 1 or len(array) == 0:\n",
    "        return x\n",
    "    else:\n",
    "        pivot = x[0]\n",
    "        i = 0\n",
    "        for j in range(len(x)-1):\n",
    "            if x[j+1] < pivot:\n",
    "                x[j+1],x[i+1] = x[i+1], x[j+1]\n",
    "                i += 1\n",
    "        x[0],x[i] = x[i],x[0]\n",
    "        first_part = quicksort(x[:i])\n",
    "        second_part = quicksort(x[i+1:])\n",
    "        first_part.append(x[i])\n",
    "        return first_part + second_part\n",
    "\n",
    "assert array == sorted(copy)        \n",
    "quicksort(alist)\n",
    "print(alist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8851b9cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "@contextlib.contextmanager\n",
    "def timeit(name):\n",
    "    start = time.time()\n",
    "    yield\n",
    "    end = time.time()\n",
    "    took = end - start\n",
    "    print(f\"The {name} took {took:.4f}s\")\n",
    "\n",
    "\n",
    "def nearly_sorted_array(size):\n",
    "    array = [i for i in range(0, size + 1)]\n",
    "\n",
    "    for i in range(10, size, 10):\n",
    "        array[i], array[i - 1] = array[i - 1], array[i]\n",
    "\n",
    "    return array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5369e38",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ == '__main__':\n",
    "    number_of_items = 5001\n",
    "\n",
    "    normal_array = [random.randint(0, number_of_items)\n",
    "                    for i in range(number_of_items)]\n",
    "    random.shuffle(normal_array)\n",
    "\n",
    "    nearly_sorted = nearly_sorted_array(number_of_items)\n",
    "    reversed_array = sorted(normal_array, reverse=True)\n",
    "    sorted_array = sorted(normal_array)\n",
    "\n",
    "    algorithms = {\n",
    "        \"bubble_sort\": bubble_sort.sort,\n",
    "        \"selection_sort\": selection_sort.sort,\n",
    "        \"insertion_sort\": insertion_sort.sort,\n",
    "        \"merge_sort\": merge_sort.sort, \n",
    "        \"shell_sort,\" : shell_sort,\n",
    "    }\n",
    "\n",
    "    print(\"Sorting random array\")\n",
    "    print(\"-\" * 50)\n",
    "    for name, sort in algorithms.items():\n",
    "        copy_array = list(normal_array)\n",
    "\n",
    "        with timeit(name):\n",
    "            sort(copy_array)\n",
    "\n",
    "        assert copy_array == sorted(normal_array)\n",
    "\n",
    "    print(\"\\n\\nSorting nearly sorted array\")\n",
    "    print(\"-\" * 50)\n",
    "    for name, sort in algorithms.items():\n",
    "        copy_array = list(nearly_sorted)\n",
    "\n",
    "        with timeit(name):\n",
    "            sort(copy_array)\n",
    "\n",
    "        assert copy_array == sorted(nearly_sorted)\n",
    "\n",
    "    print(\"\\n\\nSorting reversed sorted array\")\n",
    "    print(\"-\" * 50)\n",
    "    for name, sort in algorithms.items():\n",
    "        copy_array = list(reversed_array)\n",
    "\n",
    "        with timeit(name):\n",
    "            sort(copy_array)\n",
    "\n",
    "        assert copy_array == sorted(reversed_array)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a61f9b8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "def sort(array):\n",
    "\n",
    "    for final in range(len(array), 0, -1):\n",
    "        exchanging = False\n",
    "\n",
    "        for current in range(0, final - 1):\n",
    "            if array[current] > array[current + 1]:\n",
    "                array[current + 1], array[current] = array[current], array[current + 1]\n",
    "                exchanging = True\n",
    "\n",
    "        if not exchanging:\n",
    "            break\n",
    "\n",
    "\n",
    "def sort(array):\n",
    "    for p in range(0, len(array)):\n",
    "        current_element = array[p]\n",
    "\n",
    "        while p > 0 and array[p - 1] > current_element:\n",
    "            array[p] = array[p - 1]\n",
    "            p -= 1\n",
    "\n",
    "        array[p] = current_element\n",
    "\n",
    "\n",
    "def sort(array):\n",
    "    aux = array[:]\n",
    "    sort_half(array, aux, 0, len(array) - 1)\n",
    "\n",
    "\n",
    "def sort_half(array, aux, start, end):\n",
    "    if start >= end:\n",
    "        return\n",
    "\n",
    "    middle = (start + end) // 2\n",
    "\n",
    "    sort_half(array, aux, start, middle)\n",
    "    sort_half(array, aux, middle + 1, end)\n",
    "\n",
    "    merge(array, aux, start, end)\n",
    "\n",
    "\n",
    "def merge(array, aux, start, end):\n",
    "    left = start\n",
    "    left_end = (start + end) // 2\n",
    "\n",
    "    right = left_end + 1\n",
    "    right_end = end\n",
    "\n",
    "    for position in range(start, end + 1):\n",
    "        if left > left_end:\n",
    "            aux[position] = array[right]\n",
    "            right += 1\n",
    "\n",
    "      \n",
    "        elif right > right_end:\n",
    "            aux[position] = array[left]\n",
    "            left += 1\n",
    "\n",
    "        \n",
    "        elif array[left] < array[right]:\n",
    "            aux[position] = array[left]\n",
    "            left += 1\n",
    "\n",
    "        else:\n",
    "            aux[position] = array[right]\n",
    "            right += 1\n",
    "\n",
    "    for k in range(start, end + 1):\n",
    "        array[k] = aux[k]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9eff0fad",
   "metadata": {},
   "outputs": [],
   "source": [
    " elif o == 1:\n",
    "        tamanho = 1000\n",
    "        print(f'tamanho vetor = {tamanho}')\n",
    "        array_random(array,tamanho)\n",
    "        insertion_sort(array)\n",
    "        selection_sort(array)\n",
    "        bubble_sort(array)\n",
    "        merge_sort(array)\n",
    "        quick_sort(array, 0, len(array))\n",
    "        shell_sort(array)\n",
    "\n",
    "    elif o == 2:\n",
    "        tamanho = 10000\n",
    "        print(f'tamanho vetor = {tamanho}')\n",
    "        array_random(array,tamanho)\n",
    "        insertion_sort(array)\n",
    "        selection_sort(array)\n",
    "        bubble_sort(array)\n",
    "        merge_sort(array)\n",
    "        quick_sort(array, 0, len(array))\n",
    "        shell_sort(array)\n",
    "\n",
    "    elif o == 3:\n",
    "        tamanho = 100000\n",
    "        print(f'tamanho vetor = {tamanho}')\n",
    "        array_random(array,tamanho)\n",
    "        insertion_sort(array)\n",
    "        selection_sort(array)\n",
    "        bubble_sort(array)\n",
    "        merge_sort(array)\n",
    "        quick_sort(array, 0, len(array))\n",
    "        shell_sort(array)\n",
    "\n",
    "    elif o == 4:\n",
    "        tamanho = 1000000\n",
    "        print(f'tamanho vetor = {tamanho}')\n",
    "        array_random(array,tamanho)\n",
    "        insertion_sort(array)\n",
    "        selection_sort(array)\n",
    "        bubble_sort(array)\n",
    "        merge_sort(array)\n",
    "        quick_sort(array, 0, len(array))\n",
    "        shell_sort(array)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c552f82d",
   "metadata": {},
   "outputs": [],
   "source": [
    "print('''\n",
    "Tempo estimado de ordena ao dos vetores por algoritmo Insrtion sort:\n",
    "random = O(n²)\n",
    "crescente = O(n)\n",
    "decrescente = O(n²)\n",
    "\n",
    "\n",
    "Selection sort:\n",
    "random = O(n²)\n",
    "crescente = O(n²)\n",
    "decrescente = O(n²)\n",
    "\n",
    "\n",
    "Bubble sort:\n",
    "random = O(n²)\n",
    "crescente = O(n)\n",
    "decrescente = O(n²)\n",
    "\n",
    "\n",
    "Shell Sort:\n",
    "random = O(n (log n)²)\n",
    "crescente = O(n (log n)²)\n",
    "decrescente = O(n (log n)²)\n",
    "\n",
    "\n",
    "Merge Sort:\n",
    "random = O(n log n)\n",
    "crescente = O(n log n)\n",
    "decrescente = O(n log n)\n",
    "\n",
    "\n",
    "Quick Sort:\n",
    "random = O(n log n)\n",
    "crescente = O(n²)\n",
    "decrescente = O(n log n)\n",
    "''')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
